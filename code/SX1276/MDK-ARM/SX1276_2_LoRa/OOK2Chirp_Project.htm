<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\SX1276_2_LoRa\OOK2Chirp_Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\SX1276_2_LoRa\OOK2Chirp_Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Nov 19 14:47:47 2020
<BR><P>
<H3>Maximum Stack Usage =        872 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; LoRa_Generate_Signal &rArr; RTC_Timer_Calibration &rArr; RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[27]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[27]">ADC1_2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[44]">ADC3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[f]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[29]">CAN1_RX0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2a]">CAN1_RX1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2b]">CAN1_SCE_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[28]">CAN1_TX_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[55]">COMP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[52]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[53]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[54]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3f]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[20]">DMA1_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[21]">DMA1_Channel2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[22]">DMA1_Channel3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[23]">DMA1_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[24]">DMA1_Channel5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[25]">DMA1_Channel6_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[26]">DMA1_Channel7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[50]">DMA2_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[51]">DMA2_Channel5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[59]">DMA2_Channel6_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1b]">EXTI0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3d]">EXTI15_10_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1c]">EXTI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1d]">EXTI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1e]">EXTI3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1f]">EXTI4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2c]">EXTI9_5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[19]">FLASH_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[45]">FMC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[65]">FPU_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[35]">I2C1_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[34]">I2C1_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[37]">I2C2_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[36]">I2C2_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5e]">I2C3_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5d]">I2C3_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[63]">LCD_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[56]">LPTIM1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[57]">LPTIM2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5b]">LPUART1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[58]">OTG_FS_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[16]">PVD_PVM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from stm32l4xx_it.o(i.PendSV_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5c]">QUADSPI_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[64]">RNG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3e]">RTC_Alarm_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[18]">RTC_WKUP_IRQHandler</a> from rtc.o(i.RTC_WKUP_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5f]">SAI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[60]">SAI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[46]">SDMMC1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[38]">SPI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[39]">SPI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[48]">SPI3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from stm32l4xx_it.o(i.SVC_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[61]">SWPMI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[7c]">SX1276CheckRfFrequency</a> from sx1276mb1mas.o(i.SX1276CheckRfFrequency) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[75]">SX1276GetStatus</a> from sx1276.o(i.SX1276GetStatus) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[7d]">SX1276GetTimeOnAir</a> from sx1276.o(i.SX1276GetTimeOnAir) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[6]">SX1276GetWakeTime</a> from sx1276mb1mas.o(i.SX1276GetWakeTime) referenced 2 times from sx1276mb1mas.o(.data)
 <LI><a href="#[8b]">SX1276GetWakeupTime</a> from sx1276.o(i.SX1276GetWakeupTime) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[74]">SX1276Init</a> from sx1276.o(i.SX1276Init) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[73]">SX1276IoDeInit</a> from sx1276mb1mas.o(i.SX1276IoDeInit) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[72]">SX1276IoInit</a> from sx1276mb1mas.o(i.SX1276IoInit) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[7]">SX1276IoIrqInit</a> from sx1276mb1mas.o(i.SX1276IoIrqInit) referenced 2 times from sx1276mb1mas.o(.data)
 <LI><a href="#[78]">SX1276IsChannelFree</a> from sx1276.o(i.SX1276IsChannelFree) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[0]">SX1276OnDio0Irq</a> from sx1276.o(i.SX1276OnDio0Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[1]">SX1276OnDio1Irq</a> from sx1276.o(i.SX1276OnDio1Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[2]">SX1276OnDio2Irq</a> from sx1276.o(i.SX1276OnDio2Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[3]">SX1276OnDio3Irq</a> from sx1276.o(i.SX1276OnDio3Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[4]">SX1276OnDio4Irq</a> from sx1276.o(i.SX1276OnDio4Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[6f]">SX1276OnTimeoutIrq</a> from sx1276.o(i.SX1276OnTimeoutIrq) referenced from sx1276.o(i.SX1276Init)
 <LI><a href="#[79]">SX1276Random</a> from sx1276.o(i.SX1276Random) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[86]">SX1276Read</a> from sx1276.o(i.SX1276Read) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[88]">SX1276ReadBuffer</a> from sx1276.o(i.SX1276ReadBuffer) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[84]">SX1276ReadRssi</a> from sx1276.o(i.SX1276ReadRssi) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[7e]">SX1276Send</a> from sx1276.o(i.SX1276Send) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[a]">SX1276SetAntSw</a> from sx1276mb1mas.o(i.SX1276SetAntSw) referenced 2 times from sx1276mb1mas.o(.data)
 <LI><a href="#[9]">SX1276SetAntSwLowPower</a> from sx1276mb1mas.o(i.SX1276SetAntSwLowPower) referenced 2 times from sx1276mb1mas.o(.data)
 <LI><a href="#[77]">SX1276SetChannel</a> from sx1276.o(i.SX1276SetChannel) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[89]">SX1276SetMaxPayloadLength</a> from sx1276.o(i.SX1276SetMaxPayloadLength) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[76]">SX1276SetModem</a> from sx1276.o(i.SX1276SetModem) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[8a]">SX1276SetPublicNetwork</a> from sx1276.o(i.SX1276SetPublicNetwork) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[8]">SX1276SetRfTxPower</a> from sx1276mb1mas.o(i.SX1276SetRfTxPower) referenced 2 times from sx1276mb1mas.o(.data)
 <LI><a href="#[81]">SX1276SetRx</a> from sx1276.o(i.SX1276SetRx) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[7a]">SX1276SetRxConfig</a> from sx1276.o(i.SX1276SetRxConfig) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[7f]">SX1276SetSleep</a> from sx1276.o(i.SX1276SetSleep) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[80]">SX1276SetStby</a> from sx1276.o(i.SX1276SetStby) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[7b]">SX1276SetTxConfig</a> from sx1276.o(i.SX1276SetTxConfig) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[83]">SX1276SetTxContinuousWave</a> from sx1276.o(i.SX1276SetTxContinuousWave) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[5]">SX1276SetXO</a> from sx1276mb1mas.o(i.SX1276SetXO) referenced 2 times from sx1276mb1mas.o(.data)
 <LI><a href="#[82]">SX1276StartCad</a> from sx1276.o(i.SX1276StartCad) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[85]">SX1276Write</a> from sx1276.o(i.SX1276Write) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[87]">SX1276WriteBuffer</a> from sx1276.o(i.SX1276WriteBuffer) referenced from sx1276mb1mas.o(.constdata)
 <LI><a href="#[14]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[67]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[17]">TAMP_STAMP_IRQHandler</a> from rtc.o(i.TAMP_STAMP_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2d]">TIM1_BRK_TIM15_IRQHandler</a> from timer.o(i.TIM1_BRK_TIM15_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[30]">TIM1_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2f]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2e]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[31]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[32]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[33]">TIM4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[47]">TIM5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4b]">TIM6_DAC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4c]">TIM7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[40]">TIM8_BRK_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[43]">TIM8_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[42]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[41]">TIM8_UP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[62]">TSC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[49]">UART4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4a]">UART5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[69]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[6e]">UART_DMAError</a> from stm32l4xx_hal_uart.o(i.UART_DMAError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[6c]">UART_DMATransmitCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[6d]">UART_DMATxHalfCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[6a]">UART_RxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[6b]">UART_RxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[3a]">USART1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3b]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3c]">USART3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[10]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[15]">WWDG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[68]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[71]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[70]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[66]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[68]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[16e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[16f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[170]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[171]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[172]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[173]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[174]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Generate_Signal
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_GPIO_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[17b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[17c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[17d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[96]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9f]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[180]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>Control_GPIO_Init</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, control_gpio.o(i.Control_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Control_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debug.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = Error_Handler &rArr; TraceSend &rArr; vcom_Trace &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[a8]"></a>Fast_SetChannel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, simulated_lora.o(i.Fast_SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Fast_SetChannel &rArr; SX1276_Burst_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Burst_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Generate_Signal
</UL>

<P><STRONG><a name="[128]"></a>GPIO_Set</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, sys.o(i.GPIO_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_ADC_Init</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsInternalRegulatorEnabled
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcInit
</UL>

<P><STRONG><a name="[ab]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[f6]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[b2]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[a4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 480 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_GPIO_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[a5]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_GPIO_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>

<P><STRONG><a name="[b3]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>

<P><STRONG><a name="[141]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>HAL_InitTick</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[b7]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[b9]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[b5]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[143]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11d]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[d4]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[144]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bc]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1230 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[bf]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[c1]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c3]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 220 bytes, Stack size 20 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c4]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_MCOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_MCOConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1660 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[11f]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc_ex.o(i.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_RTCEx_Tamper1EventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc_ex.o(i.HAL_RTCEx_Tamper1EventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TamperTimeStampIRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_RTCEx_Tamper2EventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc_ex.o(i.HAL_RTCEx_Tamper2EventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TamperTimeStampIRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>HAL_RTCEx_Tamper3EventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc_ex.o(i.HAL_RTCEx_Tamper3EventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TamperTimeStampIRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_RTCEx_TamperTimeStampIRQHandler</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc_ex.o(i.HAL_RTCEx_TamperTimeStampIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_TamperTimeStampIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_Tamper3EventCallback
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_Tamper2EventCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_Tamper1EventCallback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TimeStampEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMP_STAMP_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>HAL_RTCEx_TimeStampEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtc.o(i.HAL_RTCEx_TimeStampEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TamperTimeStampIRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[cf]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[d0]"></a>HAL_RTC_Init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 120 bytes, Stack size 216 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[d8]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>

<P><STRONG><a name="[d9]"></a>HAL_SPI_Init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[db]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 700 bytes, Stack size 56 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
</UL>

<P><STRONG><a name="[169]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_Init
</UL>

<P><STRONG><a name="[146]"></a>HAL_TIMEx_RemapConfig</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_RemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_RemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_Init
</UL>

<P><STRONG><a name="[dd]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, timer.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[11a]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Generate_Signal
</UL>

<P><STRONG><a name="[11c]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Generate_Signal
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, timer.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_IC_CaptureCallback &rArr; HAL_TIM_IC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI4_SetConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI3_SetConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_Init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_Init
</UL>

<P><STRONG><a name="[e9]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timer.o(i.HAL_TIM_IC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_IC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[ea]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_IC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_TIM_IC_Stop_IT</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[ec]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; HAL_TIM_IC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_ReadCapturedValue))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[f2]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[15b]"></a>HAL_UART_GetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>HAL_UART_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[fb]"></a>HAL_UART_MspInit</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[15c]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[ff]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Trace
</UL>

<P><STRONG><a name="[158]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vcom.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[159]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[100]"></a>HW_AdcInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32l4xx_hw.o(i.HW_AdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HW_AdcInit &rArr; HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[101]"></a>HW_GPIO_Init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, hw_gpio.o(i.HW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[102]"></a>HW_GPIO_SetIrq</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, hw_gpio.o(i.HW_GPIO_SetIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_GPIO_SetIrq &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_GetIRQn
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_GetBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
</UL>

<P><STRONG><a name="[105]"></a>HW_GPIO_Write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hw_gpio.o(i.HW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[106]"></a>HW_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hw.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = HW_Init &rArr; HW_SPI_Init &rArr; Error_Handler &rArr; TraceSend &rArr; vcom_Trace &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>HW_RTC_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_rtc.o(i.HW_RTC_GetMinimumTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[109]"></a>HW_RTC_GetTimerElapsedTime</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_RTC_GetTimerElapsedTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[10a]"></a>HW_RTC_GetTimerValue</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[10b]"></a>HW_RTC_SetAlarm</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_GetMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[10f]"></a>HW_RTC_SetTimerContext</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_SetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HW_RTC_SetTimerContext &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[111]"></a>HW_RTC_StopAlarm</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_StopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_RTC_StopAlarm &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[14a]"></a>HW_RTC_Tick2ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hw_rtc.o(i.HW_RTC_Tick2ms))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[112]"></a>HW_RTC_ms2Tick</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HW_RTC_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[113]"></a>HW_SPI_InOut</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hw_spi.o(i.HW_SPI_InOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[107]"></a>HW_SPI_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, hw_spi.o(i.HW_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = HW_SPI_Init &rArr; Error_Handler &rArr; TraceSend &rArr; vcom_Trace &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[114]"></a>HW_SPI_IoInit</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, hw_spi.o(i.HW_SPI_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HW_SPI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[125]"></a>LL_EXTI_ClearFlag_0_31</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.LL_EXTI_ClearFlag_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>LL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, control_gpio.o(i.LL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Generate_Signal
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>LL_RTC_ClearFlag_WUT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc.o(i.LL_RTC_ClearFlag_WUT))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>LL_RTC_IsActiveFlag_WUT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtc.o(i.LL_RTC_IsActiveFlag_WUT))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>LL_TIM_ClearFlag_UPDATE</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.LL_TIM_ClearFlag_UPDATE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>LL_TIM_IsActiveFlag_UPDATE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.LL_TIM_IsActiveFlag_UPDATE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>LPM_GetMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, low_power_manager.o(i.LPM_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[16d]"></a>LPM_SetOffMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, low_power_manager.o(i.LPM_SetOffMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPM_SetOffMode
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>LPM_SetStopMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, low_power_manager.o(i.LPM_SetStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>

<P><STRONG><a name="[115]"></a>LoRa_Generate_Signal</STRONG> (Thumb, 1626 bytes, Stack size 512 bytes, simulated_lora.o(i.LoRa_Generate_Signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = LoRa_Generate_Signal &rArr; RTC_Timer_Calibration &rArr; RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Timer_Calibration
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>MSP_GetIRQn</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(i.MSP_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
</UL>

<P><STRONG><a name="[121]"></a>Max</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer_calibration.o(i.Max))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Timer_Calibration
</UL>

<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>Min</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer_calibration.o(i.Min))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Timer_Calibration
</UL>

<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[d7]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[d2]"></a>RTC_EnterInitMode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[d3]"></a>RTC_ExitInitMode</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[11e]"></a>RTC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Timer_Calibration
</UL>

<P><STRONG><a name="[116]"></a>RTC_Timer_Calibration</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, timer_calibration.o(i.RTC_Timer_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = RTC_Timer_Calibration &rArr; RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Min
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Generate_Signal
</UL>

<P><STRONG><a name="[18]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc.o(i.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WKUP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsActiveFlag_WUT
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ClearFlag_WUT
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag_0_31
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[126]"></a>RxChainCalibration</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, sx1276.o(i.RxChainCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[127]"></a>SPI1_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, fast_spi.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI1_Init &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>SPI1_WriteByte_u16</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fast_spi.o(i.SPI1_WriteByte_u16))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Burst_Write
</UL>

<P><STRONG><a name="[140]"></a>SPI1_WriteByte_u8</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fast_spi.o(i.SPI1_WriteByte_u8))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Burst_Write
</UL>

<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>SX1276BoardInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276.o(i.SX1276BoardInit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
</UL>

<P><STRONG><a name="[7c]"></a>SX1276CheckRfFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276mb1mas.o(i.SX1276CheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>SX1276GetPaSelect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276mb1mas.o(i.SX1276GetPaSelect))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>

<P><STRONG><a name="[75]"></a>SX1276GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276.o(i.SX1276GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 818 bytes, Stack size 128 bytes, sx1276.o(i.SX1276GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SX1276GetTimeOnAir &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[6]"></a>SX1276GetWakeTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276mb1mas.o(i.SX1276GetWakeTime))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>SX1276GetWakeupTime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(i.SX1276GetWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276GetWakeupTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>SX1276Init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX1276Init &rArr; RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>SX1276IoDeInit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1276mb1mas.o(i.SX1276IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>SX1276IoInit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sx1276mb1mas.o(i.SX1276IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SX1276IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276BoardInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[7]"></a>SX1276IoIrqInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sx1276mb1mas.o(i.SX1276IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276IoIrqInit &rArr; HW_GPIO_SetIrq &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>SX1276IsChannelFree</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, sx1276.o(i.SX1276IsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[0]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 818 bytes, Stack size 24 bytes, sx1276.o(i.SX1276OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276OnDio0Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>SX1276OnDio1Irq</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio1Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276OnDio1Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>SX1276OnDio2Irq</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, sx1276.o(i.SX1276OnDio2Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276OnDio2Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>SX1276OnDio3Irq</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio3Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276OnDio3Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>SX1276OnDio4Irq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sx1276.o(i.SX1276OnDio4Irq))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>SX1276OnTimeoutIrq</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, sx1276.o(i.SX1276OnTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX1276OnTimeoutIrq &rArr; SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(i.SX1276Init)
</UL>
<P><STRONG><a name="[79]"></a>SX1276Random</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>SX1276Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>SX1276ReadBuffer</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sx1276.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>SX1276ReadFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276.o(i.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[84]"></a>SX1276ReadRssi</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1276.o(i.SX1276ReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276ReadRssi &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>SX1276Reset</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sx1276.o(i.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SX1276Reset &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[7e]"></a>SX1276Send</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, sx1276.o(i.SX1276Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX1276Send &rArr; SX1276SetTx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[a]"></a>SX1276SetAntSw</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sx1276mb1mas.o(i.SX1276SetAntSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1276SetAntSw &rArr; HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>SX1276SetAntSwLowPower</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sx1276mb1mas.o(i.SX1276SetAntSwLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>SX1276SetChannel</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>SX1276SetMaxPayloadLength</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>SX1276SetModem</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>SX1276SetOpMode</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Generate_Signal
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[8a]"></a>SX1276SetPublicNetwork</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[8]"></a>SX1276SetRfTxPower</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, sx1276mb1mas.o(i.SX1276SetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276SetRfTxPower &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPaSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>SX1276SetRx</STRONG> (Thumb, 612 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX1276SetRx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>SX1276SetRxConfig</STRONG> (Thumb, 792 bytes, Stack size 104 bytes, sx1276.o(i.SX1276SetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>SX1276SetSleep</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>SX1276SetStby</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276SetStby &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>SX1276SetTx</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX1276SetTx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[7b]"></a>SX1276SetTxConfig</STRONG> (Thumb, 622 bytes, Stack size 72 bytes, sx1276.o(i.SX1276SetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>SX1276SetTxContinuousWave</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, sx1276.o(i.SX1276SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SX1276SetTxContinuousWave &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[5]"></a>SX1276SetXO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276mb1mas.o(i.SX1276SetXO))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>SX1276StartCad</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sx1276.o(i.SX1276StartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276StartCad &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>SX1276Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>SX1276WriteBuffer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sx1276.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>SX1276WriteFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
</UL>

<P><STRONG><a name="[a9]"></a>SX1276_Burst_Write</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fast_spi.o(i.SX1276_Burst_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276_Burst_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_WriteByte_u8
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_WriteByte_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_SetChannel
</UL>

<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[142]"></a>SystemClock_Config</STRONG> (Thumb, 166 bytes, Stack size 232 bytes, stm32l4xx_hw.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = SystemClock_Config &rArr; Error_Handler &rArr; TraceSend &rArr; vcom_Trace &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtc.o(i.TAMP_STAMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TAMP_STAMP_IRQHandler &rArr; HAL_RTCEx_TamperTimeStampIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TamperTimeStampIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>TIM15_Init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, timer.o(i.TIM15_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM15_Init &rArr; HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_RemapConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Timer_Calibration
</UL>

<P><STRONG><a name="[2d]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.TIM1_BRK_TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM1_BRK_TIM15_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; HAL_TIM_IC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IsActiveFlag_UPDATE
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_UPDATE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>TIM2_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timer.o(i.TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>TIM3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IsActiveFlag_UPDATE
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_UPDATE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>TIM3_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(i.TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Generate_Signal
</UL>

<P><STRONG><a name="[df]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[eb]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>

<P><STRONG><a name="[e4]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[134]"></a>TimerGetCurrentTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timeserver.o(i.TimerGetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TimerGetCurrentTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[135]"></a>TimerGetElapsedTime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timeserver.o(i.TimerGetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[131]"></a>TimerInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timeserver.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[13d]"></a>TimerSetValue</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, timeserver.o(i.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>

<P><STRONG><a name="[137]"></a>TimerStart</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, timeserver.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertTimer
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[136]"></a>TimerStop</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, timeserver.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[a7]"></a>TraceSend</STRONG> (Thumb, 126 bytes, Stack size 296 bytes, trace.o(i.TraceSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = TraceSend &rArr; vcom_Trace &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Trace
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circular_queue_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circular_queue_add
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[fd]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[fe]"></a>UART_CheckIdleState</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[fc]"></a>UART_SetConfig</STRONG> (Thumb, 1150 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[156]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[3b]"></a>USART2_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[183]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[16c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[185]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[15f]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[186]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[187]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[188]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[151]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>

<P><STRONG><a name="[12e]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[130]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[12d]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __hardfp_round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[189]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[18a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[18b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[152]"></a>circular_queue_add</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, queue.o(i.circular_queue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = circular_queue_add &rArr; queue_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_copy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circular_queue_get_free_size
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_elementSize_and_inc_writeIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>

<P><STRONG><a name="[153]"></a>circular_queue_get</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, queue.o(i.circular_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = circular_queue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>

<P><STRONG><a name="[168]"></a>delay_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Generate_Signal
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Timer_Calibration
</UL>

<P><STRONG><a name="[16a]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[70]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[66]"></a>main</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = main &rArr; LoRa_Generate_Signal &rArr; RTC_Timer_Calibration &rArr; RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Generate_Signal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetOffMode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_GPIO_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[13a]"></a>memcpy1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utilities.o(i.memcpy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[16b]"></a>uart_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>vcom_Trace</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, vcom.o(i.vcom_Trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vcom_Trace &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[dc]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[129]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[12a]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[e5]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[e6]"></a>TIM_TI3_SetConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.TIM_TI3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[e7]"></a>TIM_TI4_SetConfig</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.TIM_TI4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[69]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[6e]"></a>UART_DMAError</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[6c]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[6d]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[f5]"></a>UART_EndRxTransfer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[f9]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>UART_EndTxTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[6a]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_RxISR_16BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[6b]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RxISR_8BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[c6]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[bd]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[be]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[b1]"></a>DMA_SetConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32l4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[ba]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[bb]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[af]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[ae]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[ac]"></a>LL_ADC_IsInternalRegulatorEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_IsInternalRegulatorEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[ad]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[13e]"></a>GetFskBandwidthRegValue</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sx1276.o(i.GetFskBandwidthRegValue))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>

<P><STRONG><a name="[12b]"></a>SX1276AntSwDeInit</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sx1276mb1mas.o(i.SX1276AntSwDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SX1276AntSwDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[12c]"></a>SX1276AntSwInit</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sx1276mb1mas.o(i.SX1276AntSwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SX1276AntSwInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[103]"></a>HW_GPIO_GetBitPos</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hw_gpio.o(i.HW_GPIO_GetBitPos))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
</UL>

<P><STRONG><a name="[108]"></a>HW_RTC_GetCalendarValue</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetCalendarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
</UL>

<P><STRONG><a name="[10e]"></a>HW_RTC_StartWakeUpAlarm</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, hw_rtc.o(i.HW_RTC_StartWakeUpAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[154]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, trace.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>

<P><STRONG><a name="[14e]"></a>TimerExists</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timeserver.o(i.TimerExists))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[14b]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timeserver.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[150]"></a>TimerInsertTimer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timeserver.o(i.TimerInsertTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsertTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[14c]"></a>TimerSetTimeout</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timeserver.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[14f]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timeserver.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[166]"></a>add_elementSize_and_inc_writeIdx</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, queue.o(i.add_elementSize_and_inc_writeIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_elementSize_and_inc_writeIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circular_queue_add
</UL>

<P><STRONG><a name="[165]"></a>circular_queue_get_free_size</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, queue.o(i.circular_queue_get_free_size))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circular_queue_add
</UL>

<P><STRONG><a name="[167]"></a>queue_copy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, queue.o(i.queue_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circular_queue_add
</UL>

<P><STRONG><a name="[161]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15e]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[163]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[162]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[71]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
